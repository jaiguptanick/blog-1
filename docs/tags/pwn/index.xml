<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwn on Alan&#39;s Blog</title>
    <link>https://tcode2k16.github.io/blog/tags/pwn/</link>
    <description>Recent content in pwn on Alan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 Mar 2020 21:33:41 +0800</lastBuildDate>
    
	<atom:link href="https://tcode2k16.github.io/blog/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CONFidence CTF 2020 Writeup</title>
      <link>https://tcode2k16.github.io/blog/posts/2020-03-15-confidence-ctf/</link>
      <pubDate>Sun, 15 Mar 2020 21:33:41 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/2020-03-15-confidence-ctf/</guid>
      <description>GPIO Tap Problem We managed to intercept some traffic on the GPIOs, can you find out what was transmitted?
c247763a9af9c6cd281b54b61c07957b800cfa1a8b9102eee95b2887b3626f36_gpio_tap.tar 332K
Solution   From the given image, we can deduce two important information:
 A HD44780 LCD display and a raspberry pi are used. The pin semantics are as the following:  GPIO 23 → D4 GPIO 17 → D5 GPIO 18 → D6 GPIO 22 → D7 GPIO 24 → ENABLE GPIO 25 → RS   We can use this knowledge along with the source code from the LiquidCrystal library to parse the tap.</description>
    </item>
    
    <item>
      <title>PicoCTF 2019 Writeup: Binary Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2019-writeup/binary-exploitation/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2019-writeup/binary-exploitation/</guid>
      <description>handy-shellcode Problem This program executes any shellcode that you give it. Can you spawn a shell and use that to read the flag.txt? You can find the program in /problems/handy-shellcode_4_037bd47611d842b565cfa1f378bfd8d9 on the shell server. Source.
Binary
Source
Solution The solution is basically the same as the shellcode challenge from last year (click the link for my writeup on that).
Here&amp;rsquo;s the exploit script that I used:
from pwn import * import sys argv = sys.</description>
    </item>
    
    <item>
      <title>HSCTF 2019 Writeup: Binary Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/2019-06-08-hsctf-writeup/</link>
      <pubDate>Sat, 08 Jun 2019 10:15:05 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/2019-06-08-hsctf-writeup/</guid>
      <description>Intro to Netcat Problem Written by: Ptomerty
Hey there! This challenge is a quick introduction to netcat and how to use it. Netcat is a program that will help you &amp;ldquo;talk&amp;rdquo; with many of our challenges, especially pwn and misc. To begin, Windows users should download this file:
Mirror 1 (may have DLL errors)
Alternative download that might work
Nmap download; will get flagged by school filters
Extract the file, then open a command prompt and navigate to the directory using cd .</description>
    </item>
    
    <item>
      <title>RCTF 2019 Writeup</title>
      <link>https://tcode2k16.github.io/blog/posts/2019-05-19-rctf-writeup/</link>
      <pubDate>Sun, 19 May 2019 21:29:39 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/2019-05-19-rctf-writeup/</guid>
      <description>draw - misc Problem I&amp;rsquo;m god&amp;rsquo;s child.
Flag format: RCTF_[A-Za-z]
cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Binary Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/</guid>
      <description>buffer overflow 0 Problem Let&amp;rsquo;s start off simple, can you overflow the right buffer in this program to get the flag? You can also find it in /problems/buffer-overflow-0_1_316c391426b9319fbdfb523ee15b37db on the shell server. Source.
Solution Let&amp;rsquo;s first take a look at the source code provided:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #define FLAGSIZE_MAX 64 char flag[FLAGSIZE_MAX]; void sigsegv_handler(int sig) { fprintf(stderr, &amp;quot;%s\n&amp;quot;, flag); fflush(stderr); exit(1); } void vuln(char *input){ char buf[16]; strcpy(buf, input); } int main(int argc, char **argv){ FILE *f = fopen(&amp;quot;flag.</description>
    </item>
    
  </channel>
</rss>