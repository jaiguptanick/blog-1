<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>picoctf on Alan&#39;s Blog</title>
    <link>https://tcode2k16.github.io/blog/tags/picoctf/</link>
    <description>Recent content in picoctf on Alan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Oct 2019 00:00:01 +0800</lastBuildDate>
    
	<atom:link href="https://tcode2k16.github.io/blog/tags/picoctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PicoCTF 2019 Writeup: Binary Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2019-writeup/binary-exploitation/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2019-writeup/binary-exploitation/</guid>
      <description>handy-shellcode Problem This program executes any shellcode that you give it. Can you spawn a shell and use that to read the flag.txt? You can find the program in /problems/handy-shellcode_4_037bd47611d842b565cfa1f378bfd8d9 on the shell server. Source.
Binary
Source
Solution The solution is basically the same as the shellcode challenge from last year (click the link for my writeup on that).
Here&amp;rsquo;s the exploit script that I used:
from pwn import * import sys argv = sys.</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Web Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/web-exploitation/</link>
      <pubDate>Sun, 14 Oct 2018 15:38:43 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/web-exploitation/</guid>
      <description>Inspect Me Problem Inpect this code! http://2018shell2.picoctf.com:35349
Solution You can do view source code in your browser to get the flag.
Here are the source code for index.html, mycss.css, and myjs.js:
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;My First Website :)&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Open+Sans|Roboto&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;mycss.css&amp;quot;&amp;gt; &amp;lt;script type=&amp;quot;application/javascript&amp;quot; src=&amp;quot;myjs.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;h1&amp;gt;My First Website&amp;lt;/h1&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;button class=&amp;quot;tablink&amp;quot; onclick=&amp;quot;openTab(&#39;tabintro&#39;, this, &#39;#222&#39;)&amp;quot; id=&amp;quot;defaultOpen&amp;quot;&amp;gt;Intro&amp;lt;/button&amp;gt; &amp;lt;button class=&amp;quot;tablink&amp;quot; onclick=&amp;quot;openTab(&#39;tababout&#39;, this, &#39;#222&#39;)&amp;quot;&amp;gt;About&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;quot;tabintro&amp;quot; class=&amp;quot;tabcontent&amp;quot;&amp;gt; &amp;lt;h3&amp;gt;Intro&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;This is my first website!</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Cryptography</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/cryptography/</link>
      <pubDate>Sun, 14 Oct 2018 11:38:43 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/cryptography/</guid>
      <description>Crypto Warmup 1 Problem Crpyto can often be done by hand, here&amp;rsquo;s a message you got from a friend, llkjmlmpadkkc with the key of thisisalilkey. Can you use this table to solve it?.
Solution This is a classic Vigenère cipher. You can use this to decode the message.
flag: picoCTF{SECRETMESSAGE}
Crypto Warmup 2 Problem Cryptography doesn&amp;rsquo;t have to be complicated, have you ever heard of something called rot13? cvpbPGS{guvf_vf_pelcgb!}</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Forensics</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/forensics/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:02 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/forensics/</guid>
      <description>Forensics Warmup 1 Problem Can you unzip this file for me and retreive the flag?
Solution Just unzip the file.
flag: picoCTF{welcome_to_forensics}
Forensics Warmup 2 Problem Hmm for some reason I can&amp;rsquo;t open this PNG? Any ideas?
Solution Using the file command, you can see that the image is, in fact, in jpeg format not png:
❯ file flag.png flag.png: JPEG image data, JFIF standard 1.01  Open the image as a jpeg file to get the file.</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Binary Exploitation</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/binary-exploitation/</guid>
      <description>buffer overflow 0 Problem Let&amp;rsquo;s start off simple, can you overflow the right buffer in this program to get the flag? You can also find it in /problems/buffer-overflow-0_1_316c391426b9319fbdfb523ee15b37db on the shell server. Source.
Solution Let&amp;rsquo;s first take a look at the source code provided:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #define FLAGSIZE_MAX 64 char flag[FLAGSIZE_MAX]; void sigsegv_handler(int sig) { fprintf(stderr, &amp;quot;%s\n&amp;quot;, flag); fflush(stderr); exit(1); } void vuln(char *input){ char buf[16]; strcpy(buf, input); } int main(int argc, char **argv){ FILE *f = fopen(&amp;quot;flag.</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: General Skills</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/general-skills/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/general-skills/</guid>
      <description>General Warmup 1 Problem If I told you your grade was 0x41 in hexadecimal, what would it be in ASCII?
Solution This is a basic introduction to ASCII codes. If you have not memorized that 0x41 is A in ASCII (which you should), you can use python to find it:
&amp;gt;&amp;gt;&amp;gt; chr(0x41) &#39;A&#39;  flag: picoCTF{A}
General Warmup 2 Problem Can you convert the number 27 (base 10) to binary (base 2)?</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Reversing</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/reversing/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/reversing/</guid>
      <description>Reversing Warmup 1 Problem Throughout your journey you will have to run many programs. Can you navigate to /problems/reversing-warmup-1_0_f99f89de33522c93964bdec49fb2b838 on the shell server and run this program to retreive the flag?
Solution The problem run is known as a ELF binary. It is the most common program format on Linux. Here are the steps to run the program:
alanc@pico-2018-shell-2:~$ cd /problems/reversing-warmup-1_0_f99f89de33522c93964bdec49fb2b838 alanc@pico-2018-shell-2:/problems/reversing-warmup-1_0_f99f89de33522c93964bdec49fb2b838$ ls run alanc@pico-2018-shell-2:/problems/reversing-warmup-1_0_f99f89de33522c93964bdec49fb2b838$ ./run picoCTF{welc0m3_t0_r3VeRs1nG}  flag: picoCTF{welc0m3_t0_r3VeRs1nG}</description>
    </item>
    
    <item>
      <title>PicoCTF 2018 Writeup: Summary</title>
      <link>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/main/</link>
      <pubDate>Sat, 13 Oct 2018 08:56:01 +0800</pubDate>
      
      <guid>https://tcode2k16.github.io/blog/posts/picoctf-2018-writeup/main/</guid>
      <description> Writeups Here are the writeups from my team, SAS Hackers:
 General Skills Challenges Reversing Challenges Binary Exploitation Challenges Forensics Challenges Cryptography Challenges Web Exploitation Challenges  Ranking Our team ended at No. 46 on the scoreboard.
Here is an image of the scoreboard at the end of the competition:
  </description>
    </item>
    
  </channel>
</rss>